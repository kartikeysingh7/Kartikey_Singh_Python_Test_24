1. """You can use this class to represent how classy someone
or something is.
"Classy" is interchangable with "fancy".
If you add fancy-looking items, you will increase
your "classiness".
Create a function in "Classy" that takes a string as
input and adds it to the "items" list.
Another method should calculate the "classiness"
value based on the items.
The following items have classiness points associated
with them:
"tophat" = 2
"bowtie" = 4
"monocle" = 5
Everything else has 0 points.

Solution:

class Classy(object):
    def __init__(self):
        self.items = []
    def addItem(self, str1):
        self.items.append(str1)
    def getClassiness(self):
        sum = 0
        for item in self.items:
            if (item == "tophat"):
                sum = sum + 2
            elif (item == "bowtie"):
                sum = sum + 4
            elif (item == "monocle"):
                sum = sum + 5
        return sum
me = Classy()
print(me.getClassiness())
me.addItem("tophat")
print(me.getClassiness())
me.addItem("bowtie")
me.addItem("jacket")
me.addItem("monocle")
print(me.getClassiness())
me.addItem("bowtie")
print(me.getClassiness())



2.# Write a function called "show_excitement" where the string
# "I am super excited for this course!" is returned exactly
# 5 times, where each sentence is separated by a single space.
# Return the string with "return".
# You can only have the string once in your code.
# Don't just copy/paste it 5 times into a single variable!

Solution:

def show_excitement():
    string="I am super excited for this course! " *5 
    return string
print(show_excitement())



3.Create a Bus child class that inherits from the Vehicle class. The default fare charge of any vehicle is seating capacity * 100. If Vehicle is Bus instance, we need to add an extra 10% on full fare as a maintenance charge. So total fare for bus instance will become the final amount = total fare + 10% of the total fare.
Note: The bus seating capacity is 50. so the final fare amount should be 5500. You need to override the fare() method of a Vehicle class in Bus class.
Expected Output:
Total Bus fare is: 5500.0

Solution:

class Vehicle:
    def __init__(self, name, mileage, capacity):
        self.name = name
        self.mileage = mileage
        self.capacity = capacity

    def fare(self):
        return self.capacity * 100

class Bus(Vehicle):
    def fare(self):
        amount = super().fare()
        amount += amount * 10 / 100
        return amount

School_bus = Bus("School Volvo", 12, 50)
print("Total Bus fare is:", School_bus.fare())




4.: Rename key of a dictionary
Write a program to rename a key city to a location in the following dictionary.
Expected output:
{'name': 'Kelly', 'age': 25, 'salary': 8000, 'location': 'New york'}

Solution:

sampleDict = { 
  "name": "Kelly",
  "age":25, 
  "salary": 8000, 
  "location": "New york" }
keys = ["name","age", "salary","location"]
newDict = {k: sampleDict[k] for k in keys}
print(newDict)



5. Given an array arr[] of integers. Find a peak element i.e. an element that is not smaller than its neighbors. 
Note: For corner elements, we need to consider only one neighbor           
Example:
Input: array[] = {10, 20, 15, 2, 23, 90, 67}
Output: 20 or 90
Explanation: The element 20 has neighbors 10 and 15, both of them are less than 20, similarly 90 has neighbors 23 and 67.
The following corner cases give a better idea about the problem. 
If the input array is sorted in a strictly increasing order, the last element is always a peak element. For example, 50 is peak element in {10, 20, 30, 40, 50}.
If the input array is sorted in a strictly decreasing order, the first element is always a peak element. 100 is the peak element in {100, 80, 60, 50, 20}.
If all elements of the input array are the same, every element is a peak element.
It is clear from the above examples that there is always a peak element in the input array.

Solution:

def findPeak(arr, n):
	if (n == 1):
	    return 0
	if (arr[0] >= arr[1]) :
		return 0
	if (arr[n - 1] >= arr[n - 2]) :
		return n - 1
	for i in range(1, n - 1) :
		if (arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]) :
			return i
arr = [ 10, 20, 15, 2, 23, 90, 67 ]
n = len(arr)
print("Index of a peak point is", findPeak(arr, n))




6.Given an array and a number K where K is smaller than the size of the array. Find the Kâ€™th smallest element in the given array. Given that all array elements are distinct.
Examples:  
Input: arr[] = {7, 10, 4, 3, 20, 15}, K = 3 
Output: 7

Solution:

def kthSmallest(arr, N, K):
    arr.sort()
    return arr[K-1]
if __name__ == '__main__':
    arr = [7, 10, 4, 3, 20, 15]
    N = len(arr)
    K = 3
print("K'th smallest element is",kthSmallest(arr, N, K))




7.Given an array of N integers, and a number sum, the task is to find the number of pairs of integers in the array whose sum is equal to sum.
Examples:  
Input:  arr[] = {1, 5, 7, -1}, sum = 6
Output:  2

Solution:

def getPairsCount(arr, n, sum):
    count=0
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count
arr = [1, 5, 7, -1]
n = len(arr)
sum = 6
print("Count of pairs is", getPairsCount(arr, n, sum))



8.An array contains both positive and negative numbers in random order. Rearrange the array elements so that all negative numbers appear before all positive numbers.
Examples : 
Input: -12, 11, -13, -5, 6, -7, 5, -3, -6
Output: -12 -13 -5 -7 -3 -6 5 6 11

Solution:
def rearrange(arr, n ) :
    j = 0
    for i in range(0, n) :
        if (arr[i] < 0) :
            temp = arr[i]
            arr[i] = arr[j]
            arr[j]= temp
            j = j + 1
    print(arr)
arr = [-12, 11, -13, -5, 6, -7, 5, -3, -6]
n = len(arr)
rearrange(arr, n)



9.Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
 
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Solution:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] ans = new int[2];
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i])) {
                ans[0] = map.get(target - nums[i]);
                ans[1] = i;
                return ans;
            }
            map.put(nums[i], i);
        }
        return ans;
    }
}


 

10.The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).
For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.
Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.
Return the maximum such product difference.
 
Example 1:
Input: nums = [5,6,2,7,4]
Output: 34
Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).
The product difference is (6 * 7) - (2 * 4) = 34.

Solution:

class Solution {
    public int maxProductDifference(int[] nums) {
        Arrays.sort(nums);
        int length = nums.length;
        return nums[length - 2] * nums[length - 1] - nums[0] * nums[1];
    }
}



11.A sentence is a list of words that are separated by a single space with no leading or trailing spaces.
You are given an array of strings sentences, where each sentences[i] represents a single sentence.
Return the maximum number of words that appear in a single sentence.
 
Example 1:
Input: sentences = ["alice and bob love leetcode", "i think so too", "this is great thanks very much"]

Solution:

OUT = 3
IN = 3
def countWords(string):
    state = OUT
    wc = 3
    for i in range(len(string)):
        if (string[i] == ' ' or string[i] == '\n' or
            string[i] == '\t'):
            state = OUT
        elif state == OUT:
            state = IN
            wc += 3
            return wc
string=["alice and bob love leetcode", "i think so too", "this is great thanks very much"]
print("No. of words : " + str(countWords(string)))



12. Balanced strings are those that have an equal quantity of 'L' and 'R' characters.
Given a balanced string s, split it into some number of substrings such that:
Each substring is balanced.
Return the maximum number of balanced strings you can obtain.
 
Example 1:
Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.

Solution:

def BalancedPartition(str1, n):
    if (n == 0):
        return 0
    r = 0
    l = 0
    ans = 0
 
    for i in range(n):
        if (str1[i] == 'R'):
            r += 5
        elif (str1[i] == 'L'):
            l += 5
        if (r == l):
            ans += 4
            return ans
if __name__=='__main__':
    str1 = "RLRRLLRLRL"
    n = len(str1)
    print(BalancedPartition(str1, n))



13. Given an integer n, return a string array answer (1-indexed) where:
answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true.
 
Example 1:
Input: n = 3
Output: ["1","2","Fizz"]

Solution:

var fizzBuzz = function (n) {
  const temp = [];
  for (let i = 1; i <= n; i++) {
    if (i % 3 === 0 && i % 5 !== 0) {
      temp.push('Fizz');
    } else if (i % 5 === 0 && i % 3 !== 0) {
      temp.push('Buzz');
    } else if (i % 15 === 0) {
      temp.push('FizzBuzz');
    } else {
      temp.push(`${i}`);
    }
  }
  return temp;
};



14.Given a list of numbers of list, write a Python program to create a list of tuples having first element as the number and second element as the cube of the number. Example:
Input: list = [1, 2, 3]
Output: [(1, 1), (2, 8), (3, 27)]

Solution:

list1 = [1, 2, 5, 6]
res = [(val, pow(val, 3)) for val in list1]
print(res)



15.With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.

Suppose the following input is supplied to the program:
8
Then, the output should be:
{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}

Solution:

n=input("1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64")
d={x:x*x for x in range(1,n+1)}
print(d)
